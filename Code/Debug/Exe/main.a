;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// types
;typedef char* User;
;typedef char* Password;
;
;// states
;#define IDLE -1
;#define INIT 0
;#define LOGIN_USER 1
;#define LOGIN_PASS_INIT 2
;#define LOGIN_PASS 3
;#define LOGIN_CHECK 4
;#define ADMIN_MENU 5
;#define ADMIN_CHECK 6
;#define ADMIN_ADD 7
;#define ADMIN_ADD_CHECK 8
;#define ADMIN_DEL 9
;#define ADMIN_DEL_CHECK 10
;#define ADMIN_CNT 11
;#define ADMIN_CNT_CHECK 12
;#define DOOR_OPEN 20
;
;
;// Declare your global variables here
;int state = ADMIN_MENU;
;int cursor = 0;
;int access = 1;
;
;User user;
;Password password;
;
;
;// functions
;char getKey();
;
;void print(char c) {
; 0000 0028 void print(char c) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0029     lcd_gotoxy(cursor, 1);
;PCODE: $0000000F VOL: 0
;	c -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002A     lcd_putchar(c);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002B     cursor++;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002C }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void prints(char* s) {
; 0000 002E void prints(char* s) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002F     lcd_puts(s);
;PCODE: $0000001D VOL: 0
;	*s -> Y+0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0030 }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;
;void clear() {
; 0000 0032 void clear() {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0033     cursor = cursor > 0 ? cursor-1 : 0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0034     lcd_gotoxy(cursor, 1);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0035     lcd_putchar('');
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0036 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void) {
; 0000 0039 interrupt [2] void ext_int0_isr(void) {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003A     char pressedKey = '';
; 0000 003B     switch (state) {
;PCODE: $00000038 VOL: 0
;	pressedKey -> R17
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003C         case LOGIN_USER:
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003D             pressedKey = getKey();
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003E 
; 0000 003F             if (pressedKey == '#') {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0040                 state = LOGIN_PASS_INIT;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0041             }else if (pressedKey == '*') {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0042                 clear();
;PCODE: $0000004A VOL: 0
; 0000 0043             }else{
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0044                 user[cursor] = pressedKey;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0045                 print(pressedKey);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0046             }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0047             break;
;PCODE: $00000054 VOL: 0
; 0000 0048 
; 0000 0049         case LOGIN_PASS:
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004A             pressedKey = getKey();
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004B 
; 0000 004C             if (pressedKey == '#') {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004D                 state = LOGIN_CHECK;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004E             }else if (pressedKey == '*') {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004F                 clear();
;PCODE: $00000064 VOL: 0
; 0000 0050             }else{
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0051                 password[cursor] = pressedKey;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0052                 print('*');
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0053             }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0054             break;
;PCODE: $0000006E VOL: 0
; 0000 0055         case ADMIN_CHECK:
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0056             pressedKey = getKey();
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0057 
; 0000 0058             if (pressedKey == '0') {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0059                 state = DOOR_OPEN;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005A             }else if (pressedKey == '1') {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 005B                 state = ADMIN_ADD;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005C             }else if (pressedKey == '2'){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 005D                 state = ADMIN_DEL;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005E             }else if (pressedKey == '3'){
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 005F                 state = ADMIN_CNT;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0060             }else{
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0061               // possible error message
; 0000 0062               // delay library needs to be added
; 0000 0063               state = ADMIN_MENU;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0064             }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0065             break;
;PCODE: $00000096 VOL: 0
; 0000 0066         case ADMIN_CNT_CHECK:
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0067             pressedKey = getKey();
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0068 
; 0000 0069             if (pressedKey == '0') {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 006A                 access = 0;
;PCODE: $0000009F VOL: 0
; 0000 006B                 // possible acknowledge message
; 0000 006C                 state = ADMIN_MENU;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 006D             }else if (pressedKey == '1'){
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006E                 access = 1;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 006F                 // possible acknowledge message
; 0000 0070                 state = ADMIN_MENU;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0071             }else if (pressedKey == '2') {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0072                 access = 2;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0073                 // possible acknowledge message
; 0000 0074                 state = ADMIN_MENU;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0075             }else{
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0076               // possible error message
; 0000 0077               // delay library needs to be added
; 0000 0078               state = ADMIN_MENU;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0079             }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007A             break;
;PCODE: $000000BB VOL: 0
; 0000 007B     }
;PCODE: $000000BC VOL: 0
; 0000 007C 
; 0000 007D }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;char getKey() {
; 0000 007F char getKey() {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0080     char pressedKey = '';
; 0000 0081 
; 0000 0082     PORTC.0 = 0;
;PCODE: $000000C3 VOL: 0
;	pressedKey -> R17
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0083     PORTC.1 = 1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0084     PORTC.2 = 1;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0085 
; 0000 0086     if (PINC.0 == 0) {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0087         if (PINC.3 == 0) {
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0088             pressedKey = '1';
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0089         }else if (PINC.4 == 0) {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 008A             pressedKey = '4';
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008B         }else if (PINC.5 == 0) {
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008C             pressedKey = '7';
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 008D         }else if (PINC.6 == 0) {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 008E             pressedKey = '*';
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 008F         }
; 0000 0090     }
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0091 
; 0000 0092     PORTC.0 = 1;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0093     PORTC.1 = 0;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0094     PORTC.2 = 1;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0095 
; 0000 0096     if (PINC.1 == 0) {
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0097         if (PINC.3 == 0) {
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0098             pressedKey = '2';
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0099         }else if (PINC.4 == 0) {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 009A             pressedKey = '5';
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 009B         }else if (PINC.5 == 0) {
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 009C             pressedKey = '8';
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 009D         }else if (PINC.6 == 0) {
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 009E             pressedKey = '0';
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 009F         }
; 0000 00A0     }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00A1 
; 0000 00A2     PORTC.0 = 1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00A3     PORTC.1 = 1;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00A4     PORTC.2 = 0;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00A5 
; 0000 00A6     if (PINC.2 == 0) {
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00A7         if (PINC.3 == 0) {
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00A8             pressedKey = '3';
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00A9         }else if (PINC.4 == 0) {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00AA             pressedKey = '6';
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00AB         }else if (PINC.5 == 0) {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00AC             pressedKey = '9';
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00AD         }else if (PINC.6 == 0) {
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00AE             pressedKey = '#';
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00AF         }
; 0000 00B0     }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00B1 
; 0000 00B2     PORTC.0 = 0;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00B3     PORTC.1 = 0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00B4     PORTC.2 = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00B5 
; 0000 00B6     return pressedKey;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00B7 }
;PCODE: $00000147 VOL: 0
;
;void main(void)
; 0000 00BA {
;PCODE: $00000148 VOL: 0
; 0000 00BB     // Declare your local variables here
; 0000 00BC 
; 0000 00BD     // Input/Output Ports initialization
; 0000 00BE     // Port A initialization
; 0000 00BF     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C0     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00C1     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C2     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00C3 
; 0000 00C4     // Port B initialization
; 0000 00C5     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C6     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C7     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C8     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00C9 
; 0000 00CA     // Port C initialization
; 0000 00CB     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00CC     DDRC=(1<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00CD     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00CE     PORTC=(0<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00CF 
; 0000 00D0     // Port D initialization
; 0000 00D1     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D2     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00D3     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D4     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00D5 
; 0000 00D6     // Timer/Counter 0 initialization
; 0000 00D7     // Clock source: System Clock
; 0000 00D8     // Clock value: Timer 0 Stopped
; 0000 00D9     // Mode: Normal top=0xFF
; 0000 00DA     // OC0 output: Disconnected
; 0000 00DB     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00DC     TCNT0=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00DD     OCR0=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00DE 
; 0000 00DF     // Timer/Counter 1 initialization
; 0000 00E0     // Clock source: System Clock
; 0000 00E1     // Clock value: Timer1 Stopped
; 0000 00E2     // Mode: Normal top=0xFFFF
; 0000 00E3     // OC1A output: Disconnected
; 0000 00E4     // OC1B output: Disconnected
; 0000 00E5     // Noise Canceler: Off
; 0000 00E6     // Input Capture on Falling Edge
; 0000 00E7     // Timer1 Overflow Interrupt: Off
; 0000 00E8     // Input Capture Interrupt: Off
; 0000 00E9     // Compare A Match Interrupt: Off
; 0000 00EA     // Compare B Match Interrupt: Off
; 0000 00EB     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00EC     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00ED     TCNT1H=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00EE     TCNT1L=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00EF     ICR1H=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00F0     ICR1L=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00F1     OCR1AH=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00F2     OCR1AL=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00F3     OCR1BH=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00F4     OCR1BL=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00F5 
; 0000 00F6     // Timer/Counter 2 initialization
; 0000 00F7     // Clock source: System Clock
; 0000 00F8     // Clock value: Timer2 Stopped
; 0000 00F9     // Mode: Normal top=0xFF
; 0000 00FA     // OC2 output: Disconnected
; 0000 00FB     ASSR=0<<AS2;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00FC     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00FD     TCNT2=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00FE     OCR2=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00FF 
; 0000 0100     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0101     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0102 
; 0000 0103     // External Interrupt(s) initialization
; 0000 0104     // INT0: On
; 0000 0105     // INT0 Mode: Rising Edge
; 0000 0106     // INT1: Off
; 0000 0107     // INT2: Off
; 0000 0108     GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0109     MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 010A     MCUCSR=(0<<ISC2);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 010B     GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 010C 
; 0000 010D     // USART initialization
; 0000 010E     // USART disabled
; 0000 010F     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0110 
; 0000 0111     // Analog Comparator initialization
; 0000 0112     // Analog Comparator: Off
; 0000 0113     // The Analog Comparator's positive input is
; 0000 0114     // connected to the AIN0 pin
; 0000 0115     // The Analog Comparator's negative input is
; 0000 0116     // connected to the AIN1 pin
; 0000 0117     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0118     SFIOR=(0<<ACME);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0119 
; 0000 011A     // ADC initialization
; 0000 011B     // ADC disabled
; 0000 011C     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 011D 
; 0000 011E     // SPI initialization
; 0000 011F     // SPI disabled
; 0000 0120     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0121 
; 0000 0122     // TWI initialization
; 0000 0123     // TWI disabled
; 0000 0124     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0125 
; 0000 0126     // Alphanumeric LCD initialization
; 0000 0127     // Connections are specified in the
; 0000 0128     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0129     // RS - PORTA Bit 1
; 0000 012A     // RD - PORTA Bit 2
; 0000 012B     // EN - PORTA Bit 3
; 0000 012C     // D4 - PORTA Bit 4
; 0000 012D     // D5 - PORTA Bit 5
; 0000 012E     // D6 - PORTA Bit 6
; 0000 012F     // D7 - PORTA Bit 7
; 0000 0130     // Characters/line: 16
; 0000 0131     lcd_init(16);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0132 
; 0000 0133     // Global enable interrupts
; 0000 0134     #asm("sei")
;PCODE: $00000194 VOL: 0
	sei
;PCODE: $00000195 VOL: 0
; 0000 0135 
; 0000 0136     while (1) {
;PCODE: $00000196 VOL: 0
; 0000 0137 
; 0000 0138         switch (state) {
;PCODE: $00000197 VOL: 0
; 0000 0139             case IDLE:
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 013A                 break;
;PCODE: $0000019A VOL: 0
; 0000 013B             case INIT:
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 013C                 PORTC.7 = 0;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 013D                 lcd_clear();
;PCODE: $000001A0 VOL: 0
; 0000 013E                 lcd_puts("user id: ");
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 013F                 lcd_gotoxy(0, 1);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0140                 state = LOGIN_USER;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0141                 break;
;PCODE: $000001AA VOL: 0
; 0000 0142 
; 0000 0143             case LOGIN_PASS_INIT:
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0144                 lcd_clear();
;PCODE: $000001AE VOL: 0
; 0000 0145                 lcd_puts("password: ");
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0146                 lcd_gotoxy(0, 1);
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0147                 state = LOGIN_PASS;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0148                 cursor = 0;
;PCODE: $000001B8 VOL: 0
; 0000 0149                 break;
;PCODE: $000001B9 VOL: 0
; 0000 014A             case ADMIN_MENU:
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 014B                 lcd_clear();
;PCODE: $000001BD VOL: 0
; 0000 014C                 lcd_puts("0 open");
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 014D                 lcd_gotoxy(6,0);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 014E                 lcd_puts("1 add user");
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 014F                 lcd_gotoxy(0,1);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0150                 lcd_puts("2 del user");
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0151                 lcd_gotoxy(8,1);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0152                 lcd_puts("3 access");
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0153                 state = ADMIN_CHECK;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0154                 break;
;PCODE: $000001D8 VOL: 0
; 0000 0155             case ADMIN_ADD:
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0156                 lcd_clear();
;PCODE: $000001DC VOL: 0
; 0000 0157                 lcd_gotoxy(0,0);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0158                 lcd_puts("enter user id:");
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0159                 state = ADMIN_ADD_CHECK;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 015A                 break;
;PCODE: $000001E6 VOL: 0
; 0000 015B             case ADMIN_DEL:
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 015C                 lcd_clear();
;PCODE: $000001EA VOL: 0
; 0000 015D                 lcd_gotoxy(0,0);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 015E                 lcd_puts("enter user id:");
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 015F                 state = ADMIN_DEL_CHECK;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0160                 break;
;PCODE: $000001F4 VOL: 0
; 0000 0161             case ADMIN_CNT:
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0162                 lcd_clear();
;PCODE: $000001F8 VOL: 0
; 0000 0163                 lcd_puts("0 public");
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0164                 lcd_gotoxy(8,0);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0165                 lcd_puts("1 users only");
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0166                 lcd_gotoxy(0,1);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0167                 lcd_puts("2 noone");
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0168                 lcd_gotoxy(8,1);
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0169                 lcd_puts("* back");
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 016A                 state = ADMIN_CNT_CHECK;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 016B                 break;
;PCODE: $00000213 VOL: 0
; 0000 016C             case DOOR_OPEN:
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 016D                 PORTC.7 = 1;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 016E                 state = IDLE;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 016F                 break;
;PCODE: $0000021B VOL: 0
; 0000 0170         }
;PCODE: $0000021C VOL: 0
; 0000 0171     }
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0172 }
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0

	.DSEG
_0x5D:
	.BYTE 0x7E
