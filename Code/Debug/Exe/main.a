;#include <alcd.h>
;#include <delay.h>
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;#include <stdlib.h>
;#include <eeprom.h>
;#include <string.h>
;
;// states
;#define IDLE -1
;#define INIT 0
;#define LOGIN_USER 1
;#define LOGIN_PASS_INIT 2
;#define LOGIN_PASS 3
;#define LOGIN_CHECK 4
;#define LOGIN_ERROR 5
;#define USER_LOGGED 6
;#define GUEST_LOGGED 7
;#define ADMIN_MENU 8
;#define ADMIN_CHECK 9
;#define ADMIN_ADD 10
;#define ADMIN_ADD_ID 11
;#define ADMIN_ADD_PASS_INIT 12
;#define ADMIN_ADD_PASS 13
;#define ADMIN_DEL 14
;#define ADMIN_DEL_CHECK 15
;#define ADMIN_CNT 16
;#define ADMIN_CNT_CHECK 17
;#define DOOR_OPEN 18
;
;// constants
;const int MAX_USER = 10;
;
;
;// structs
;typedef struct {
;  char id[4];
;  char password[4];
;} User;
;
;// variables
;char ADMIN_PASS[4];
;char ADMIN_ID[4];
;char GUEST_ID[4];
;char GUEST_PASS[4];
;
;
;int state = 0;
;int cursor = 0;
;int access = 2;
;int EEMEM eaccess = 0;
;int freeUserIndex = -1;
;
;
;User currentUser;
;User users[MAX_USER];
;User EEMEM eusers[MAX_USER];
;
;// functions
;
;int isValid(char* A){
; 0000 003D int isValid(char* A){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003E   int i;
; 0000 003F   for (i = 0; i < 4; i++) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	*A -> Y+2
;	i -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0040     if (((int) A[i]) >= '0' || ((int) A[i]) <= '9' );
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0041     else return 0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0042   }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0043   return 1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0044 }
;PCODE: $00000041 VOL: 0
;void move(char* A,char* B){
; 0000 0045 void move(char* A,char* B){
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0046   int i;
; 0000 0047   for (i = 0; i<4; i++)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;	*A -> Y+4
;	*B -> Y+2
;	i -> R16,R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0048     A[i] = B[i];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0049 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;int equals(char* A,char* B){
; 0000 004A int equals(char* A,char* B){
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 004B   int i;
; 0000 004C   for (i = 0; i<4; i++) {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	*A -> Y+4
;	*B -> Y+2
;	i -> R16,R17
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 004D     if (A[i] == B[i]);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004E     else {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 004F       delay_ms(1000);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0050       return 0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0051     }
;PCODE: $00000089 VOL: 0
; 0000 0052   }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0053   return 1;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0054 }
;PCODE: $00000096 VOL: 0
;
;void loadData() {
; 0000 0056 void loadData() {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0057   int i;
; 0000 0058   // load users
; 0000 0059 
; 0000 005A   for ( i = 0 ;i < MAX_USER ; i++) {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;	i -> R16,R17
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 005B     eeprom_read_block(&users[i], &eusers[i], sizeof(users[i]));
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 005C     if (equals(users[i].id,"0000") || !isValid(users[i].id)){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 005D       freeUserIndex = i;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 005E       break;
;PCODE: $000000C3 VOL: 0
; 0000 005F     }
; 0000 0060     // freeUserIndex = 0;
; 0000 0061   }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0062   // load access
; 0000 0063   eeprom_read_block(&access, &eaccess, sizeof(access));
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0064 }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0

	.DSEG
_0x16:
	.BYTE 0x5
;
;void writeData() {
; 0000 0066 void writeData() {

	.CSEG
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0067   // write users
; 0000 0068   int i;
; 0000 0069   for (i=0;i<MAX_USER;i++) {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;	i -> R16,R17
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 006A     eeprom_write_block(&users[i], &eusers[i], sizeof(users[i]));
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 006B   }
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 006C 
; 0000 006D   // write access
; 0000 006E   eeprom_write_block(&access, &eaccess, sizeof(access));
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 006F }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;
;void put(char c) {
; 0000 0071 void put(char c) {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0072   if (cursor > 14) return;
;PCODE: $000000FD VOL: 0
;	c -> Y+0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0073 
; 0000 0074   lcd_gotoxy(cursor, 1);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0075   lcd_putchar(c);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0076   cursor++;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0077 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;
;void clear() {
; 0000 0079 void clear() {
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 007A   if (cursor < 1) return;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 007B   cursor--;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 007C   lcd_gotoxy(cursor, 1);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 007D   lcd_putchar('');
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 007E }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;
;void clearLine() {
; 0000 0080 void clearLine() {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0081   cursor = 0;
;PCODE: $00000122 VOL: 0
; 0000 0082   lcd_gotoxy(cursor, 1);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0083   lcd_puts("                ");
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0084 }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0

	.DSEG
_0x1E:
	.BYTE 0x11
;
;void addUser(User u) {
; 0000 0086 void addUser(User u) {

	.CSEG
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0087   int j;
; 0000 0088   memcpy(&users[freeUserIndex], &u, sizeof(u));
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;	u -> Y+2
;	j -> R16,R17
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0089   freeUserIndex++;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 008A   for(j=0;j<4;j++)
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 008B   users[freeUserIndex].id[j] = '0';
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 008C writeData();
;PCODE: $0000014F VOL: 0
; 0000 008D }
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;
;void delUser(User u) {
; 0000 008F void delUser(User u) {
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0090   int i;
; 0000 0091   int j;
; 0000 0092   loadData();
;PCODE: $00000159 VOL: 0
;	u -> Y+4
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $0000015A VOL: 0
; 0000 0093   for (i=0;i<MAX_USER;i++) {
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0094     if (equals(users[i].id , u.id)) {
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0095         for (j = i; j < MAX_USER-1; j++) {
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0096           move(users[j].id,users[j+1].id);
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0097           move(users[j].password,users[j+1].password);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0098         }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0099         move(users[MAX_USER-1].id,"0000");
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 009A         move(users[MAX_USER-1].id,"0000");
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 009B         freeUserIndex--;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 009C         break;
;PCODE: $0000019F VOL: 0
; 0000 009D     }
; 0000 009E   }
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 009F   writeData();
;PCODE: $000001A6 VOL: 0
; 0000 00A0   // int i;
; 0000 00A1   // int j;
; 0000 00A2   // loadData();
; 0000 00A3   // for (i=0;i<MAX_USER;i++) {
; 0000 00A4   //   if (equals(users[i].id , u.id)) {
; 0000 00A5   //     lcd_clear();
; 0000 00A6   //     lcd_puts("yay");
; 0000 00A7   //     delay_ms(1000);
; 0000 00A8   //     for (j = i; j < MAX_USER-1; j++) {
; 0000 00A9   //     }
; 0000 00AA   //     memcpy(&users[freeUserIndex], &u, sizeof(u));
; 0000 00AB   //     freeUserIndex--;
; 0000 00AC   //     writeData();
; 0000 00AD   //  }
; 0000 00AE   //}
; 0000 00AF }
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0

	.DSEG
_0x29:
	.BYTE 0xA
;
;
;
;
;char getKey() {
; 0000 00B4 char getKey() {

	.CSEG
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00B5   char pressedKey = '';
; 0000 00B6 
; 0000 00B7   PORTC.0 = 0;
;PCODE: $000001AD VOL: 0
;	pressedKey -> R17
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00B8   PORTC.1 = 1;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00B9   PORTC.2 = 1;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00BA 
; 0000 00BB   if (PINC.0 == 0) {
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00BC     if (PINC.3 == 0) {
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00BD       pressedKey = '1';
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00BE     }else if (PINC.4 == 0) {
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 00BF       pressedKey = '4';
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00C0     }else if (PINC.5 == 0) {
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00C1       pressedKey = '7';
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00C2     }else if (PINC.6 == 0) {
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00C3       pressedKey = '*';
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00C4     }
; 0000 00C5   }
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00C6 
; 0000 00C7   PORTC.0 = 1;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 00C8   PORTC.1 = 0;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00C9   PORTC.2 = 1;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00CA 
; 0000 00CB   if (PINC.1 == 0) {
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00CC     if (PINC.3 == 0) {
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00CD       pressedKey = '2';
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 00CE     }else if (PINC.4 == 0) {
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 00CF       pressedKey = '5';
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00D0     }else if (PINC.5 == 0) {
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 00D1       pressedKey = '8';
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 00D2     }else if (PINC.6 == 0) {
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00D3       pressedKey = '0';
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 00D4     }
; 0000 00D5   }
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 00D6 
; 0000 00D7   PORTC.0 = 1;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00D8   PORTC.1 = 1;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00D9   PORTC.2 = 0;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00DA 
; 0000 00DB   if (PINC.2 == 0) {
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 00DC     if (PINC.3 == 0) {
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00DD       pressedKey = '3';
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00DE     }else if (PINC.4 == 0) {
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 00DF       pressedKey = '6';
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 00E0     }else if (PINC.5 == 0) {
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00E1       pressedKey = '9';
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 00E2     }else if (PINC.6 == 0) {
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 00E3       pressedKey = '#';
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 00E4     }
; 0000 00E5   }
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 00E6 
; 0000 00E7   PORTC.0 = 0;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 00E8   PORTC.1 = 0;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 00E9   PORTC.2 = 0;
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 00EA 
; 0000 00EB   return pressedKey;
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 00EC }
;PCODE: $00000231 VOL: 0
;
;int authenticate() {
; 0000 00EE int authenticate() {
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 00EF   int i;
; 0000 00F0   if (equals(currentUser.id , GUEST_ID)) {
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;	i -> R16,R17
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 00F1     return 1;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 00F2   }
; 0000 00F3 
; 0000 00F4   if (equals(currentUser.id , ADMIN_ID) && equals(currentUser.password , ADMIN_PASS)) {
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 00F5     return 2;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 00F6   }
; 0000 00F7 
; 0000 00F8   for (i=0;i<MAX_USER;i++) {
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 00F9     if (equals(users[i].id , currentUser.id) && equals(users[i].password , currentUser.password)) {
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 00FA       return 1;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 00FB     }
; 0000 00FC   }
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 00FD   return 0;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 00FE }
;PCODE: $00000280 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void) {
; 0000 0101 interrupt [2] void ext_int0_isr(void) {
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0102   char pressedKey = '';
; 0000 0103   switch (state) {
;PCODE: $00000283 VOL: 0
;	pressedKey -> R17
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0104     case LOGIN_USER:
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0105     pressedKey = getKey();
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0106     if (pressedKey == '#') {
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0107       cursor = 0;
;PCODE: $0000028E VOL: 0
; 0000 0108       state = LOGIN_PASS_INIT;
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0109     }else if (pressedKey == '*') {
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 010A       clear();
;PCODE: $00000296 VOL: 0
; 0000 010B     }else{
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 010C       currentUser.id[cursor] = pressedKey;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 010D       put(pressedKey);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 010E     }
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 010F     break;
;PCODE: $000002A0 VOL: 0
; 0000 0110     case LOGIN_PASS:
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0111     pressedKey = getKey();
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0112     if (pressedKey == '#') {
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 0113       cursor = 0;
;PCODE: $000002A9 VOL: 0
; 0000 0114       state = LOGIN_CHECK;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0115     }else if (pressedKey == '*') {
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0116       clear();
;PCODE: $000002B1 VOL: 0
; 0000 0117     }else{
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0118       currentUser.password[cursor] = pressedKey;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0119       put('*');
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 011A     }
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 011B     break;
;PCODE: $000002BC VOL: 0
; 0000 011C     case ADMIN_CHECK:
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 011D     pressedKey = getKey();
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 011E     if (pressedKey == '1') {
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 011F       state = DOOR_OPEN;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0120     }else if (pressedKey == '2') {
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0121       state = ADMIN_ADD;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0122     }else if (pressedKey == '3') {
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0123       state = ADMIN_DEL;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0124     }else if (pressedKey == '4') {
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0125       state = ADMIN_CNT;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0126     }else if (pressedKey == '*') {
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0127       state = INIT;
;PCODE: $000002E1 VOL: 0
; 0000 0128     }else{
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0129       lcd_puts("invalid input");
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 012A       delay_ms(1000);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 012B       state = ADMIN_MENU;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 012C     }
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 012D     break;
;PCODE: $000002F0 VOL: 0
; 0000 012E     case ADMIN_ADD_ID:
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 012F     pressedKey = getKey();
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0130     if (pressedKey == '#') {
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0131       cursor = 0;
;PCODE: $000002F9 VOL: 0
; 0000 0132       state = ADMIN_ADD_PASS_INIT;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0133     }else if (pressedKey == '*') {
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0134       clear();
;PCODE: $00000301 VOL: 0
; 0000 0135     }else{
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0136       currentUser.id[cursor] = pressedKey;
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0137       put(pressedKey);
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0138     }
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 0139 
; 0000 013A     break;
;PCODE: $0000030B VOL: 0
; 0000 013B     case ADMIN_ADD_PASS:
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 013C     pressedKey = getKey();
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 013D 
; 0000 013E     if (pressedKey == '#') {
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 013F       cursor = 0;
;PCODE: $00000314 VOL: 0
; 0000 0140       if(freeUserIndex < MAX_USER)
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 0141         addUser(currentUser);
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 0142       else{
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0143         lcd_clear();
;PCODE: $0000031D VOL: 0
; 0000 0144         lcd_puts("full");
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 0145         delay_ms(2000);
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 0146       }
;PCODE: $00000323 VOL: 0
; 0000 0147       state = ADMIN_MENU;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0148     }else if (pressedKey == '*') {
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0149       clear();
;PCODE: $0000032B VOL: 0
; 0000 014A     }else{
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 014B       currentUser.password[cursor] = pressedKey;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 014C       put('*');
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 014D     }
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 014E     break;
;PCODE: $00000336 VOL: 0
; 0000 014F     case ADMIN_DEL_CHECK:
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0150     pressedKey = getKey();
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 0151     if (pressedKey == '#') {
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0152       cursor = 0;
;PCODE: $0000033F VOL: 0
; 0000 0153       delUser(currentUser);
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0154       state = ADMIN_MENU;
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 0155     }else if (pressedKey == '*') {
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0156       clear();
;PCODE: $0000034A VOL: 0
; 0000 0157     }else{
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 0158       currentUser.id[cursor] = pressedKey;
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 0159       put(pressedKey);
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 015A     }
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 015B     break;
;PCODE: $00000354 VOL: 0
; 0000 015C     case ADMIN_CNT_CHECK:
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 015D     pressedKey = getKey();
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 015E 
; 0000 015F     if (pressedKey == '1') {
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0160       access = 1;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 0161       writeData();
;PCODE: $0000035F VOL: 0
; 0000 0162       lcd_clear();
;PCODE: $00000360 VOL: 0
; 0000 0163       lcd_puts("successful");
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 0164       delay_ms(1000);
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 0165       state = ADMIN_MENU;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 0166     }else if (pressedKey == '2') {
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 0167       access = 2;
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 0168       writeData();
;PCODE: $0000036F VOL: 0
; 0000 0169       lcd_clear();
;PCODE: $00000370 VOL: 0
; 0000 016A       lcd_puts("successful");
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 016B       delay_ms(1000);
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 016C       state = ADMIN_MENU;
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 016D     }else if (pressedKey == '3') {
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 016E       access = 3;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 016F       writeData();
;PCODE: $0000037F VOL: 0
; 0000 0170       lcd_clear();
;PCODE: $00000380 VOL: 0
; 0000 0171       lcd_puts("successful");
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0172       delay_ms(1000);
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0173       state = ADMIN_MENU;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0174     }else if (pressedKey == '*') {
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0175       state = ADMIN_MENU;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 0176     }else{
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 0177       lcd_clear();
;PCODE: $00000391 VOL: 0
; 0000 0178       lcd_puts("invalid input");
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0179       delay_ms(1000);
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 017A       state = ADMIN_MENU;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 017B     }
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 017C     break;
;PCODE: $0000039D VOL: 0
; 0000 017D   }
;PCODE: $0000039E VOL: 0
; 0000 017E }
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0

	.DSEG
_0x7C:
	.BYTE 0x42
;
;void main(void) {
; 0000 0180 void main(void) {

	.CSEG
;PCODE: $000003A3 VOL: 0
; 0000 0181   // Declare your local variables here
; 0000 0182 
; 0000 0183   // Input/Output Ports initialization
; 0000 0184   // Port A initialization
; 0000 0185   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0186   DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 0187   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0188   PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 0189 
; 0000 018A   // Port B initialization
; 0000 018B   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 018C   DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 018D   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 018E   PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 018F 
; 0000 0190   // Port C initialization
; 0000 0191   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0192   DDRC=(1<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0193   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0194   PORTC=(0<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0195 
; 0000 0196   // Port D initialization
; 0000 0197   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0198   DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 0199   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 019A   PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 019B 
; 0000 019C   // Timer/Counter 0 initialization
; 0000 019D   // Clock source: System Clock
; 0000 019E   // Clock value: Timer 0 Stopped
; 0000 019F   // Mode: Normal top=0xFF
; 0000 01A0   // OC0 output: Disconnected
; 0000 01A1   TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 01A2   TCNT0=0x00;
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 01A3   OCR0=0x00;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 01A4 
; 0000 01A5   // Timer/Counter 1 initialization
; 0000 01A6   // Clock source: System Clock
; 0000 01A7   // Clock value: Timer1 Stopped
; 0000 01A8   // Mode: Normal top=0xFFFF
; 0000 01A9   // OC1A output: Disconnected
; 0000 01AA   // OC1B output: Disconnected
; 0000 01AB   // Noise Canceler: Off
; 0000 01AC   // Input Capture on Falling Edge
; 0000 01AD   // Timer1 Overflow Interrupt: Off
; 0000 01AE   // Input Capture Interrupt: Off
; 0000 01AF   // Compare A Match Interrupt: Off
; 0000 01B0   // Compare B Match Interrupt: Off
; 0000 01B1   TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 01B2   TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 01B3   TCNT1H=0x00;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 01B4   TCNT1L=0x00;
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 01B5   ICR1H=0x00;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 01B6   ICR1L=0x00;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 01B7   OCR1AH=0x00;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 01B8   OCR1AL=0x00;
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 01B9   OCR1BH=0x00;
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 01BA   OCR1BL=0x00;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 01BB 
; 0000 01BC   // Timer/Counter 2 initialization
; 0000 01BD   // Clock source: System Clock
; 0000 01BE   // Clock value: Timer2 Stopped
; 0000 01BF   // Mode: Normal top=0xFF
; 0000 01C0   // OC2 output: Disconnected
; 0000 01C1   ASSR=0<<AS2;
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 01C2   TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 01C3   TCNT2=0x00;
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 01C4   OCR2=0x00;
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 01C5 
; 0000 01C6   // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01C7   TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 01C8 
; 0000 01C9   // External Interrupt(s) initialization
; 0000 01CA   // INT0: On
; 0000 01CB   // INT0 Mode: Rising Edge
; 0000 01CC   // INT1: Off
; 0000 01CD   // INT2: Off
; 0000 01CE   GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 01CF   MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 01D0   MCUCSR=(0<<ISC2);
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 01D1   GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
; 0000 01D2 
; 0000 01D3   // USART initialization
; 0000 01D4   // USART disabled
; 0000 01D5   UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0000 01D6 
; 0000 01D7   // Analog Comparator initialization
; 0000 01D8   // Analog Comparator: Off
; 0000 01D9   // The Analog Comparator's positive input is
; 0000 01DA   // connected to the AIN0 pin
; 0000 01DB   // The Analog Comparator's negative input is
; 0000 01DC   // connected to the AIN1 pin
; 0000 01DD   ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 01DE   SFIOR=(0<<ACME);
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0000 01DF 
; 0000 01E0   // ADC initialization
; 0000 01E1   // ADC disabled
; 0000 01E2   ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 01E3 
; 0000 01E4   // SPI initialization
; 0000 01E5   // SPI disabled
; 0000 01E6   SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 01E7 
; 0000 01E8   // TWI initialization
; 0000 01E9   // TWI disabled
; 0000 01EA   TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 01EB 
; 0000 01EC   // Alphanumeric LCD initialization
; 0000 01ED   // Connections are specified in the
; 0000 01EE   // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 01EF   // RS - PORTA Bit 1
; 0000 01F0   // RD - PORTA Bit 2
; 0000 01F1   // EN - PORTA Bit 3
; 0000 01F2   // D4 - PORTA Bit 4
; 0000 01F3   // D5 - PORTA Bit 5
; 0000 01F4   // D6 - PORTA Bit 6
; 0000 01F5   // D7 - PORTA Bit 7
; 0000 01F6   // Characters/line: 16
; 0000 01F7   lcd_init(16);
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 01F8 
; 0000 01F9   // Global enable interrupts
; 0000 01FA   #asm("sei")
;PCODE: $000003EF VOL: 0
	sei
;PCODE: $000003F0 VOL: 0
; 0000 01FB   ADMIN_ID[0] = '1';
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 01FC   ADMIN_ID[1] = '0';
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 01FD   ADMIN_ID[2] = '0';
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
; 0000 01FE   ADMIN_ID[3] = '0';
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 01FF   ADMIN_PASS[0] = '1';
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0200   ADMIN_PASS[1] = '1';
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 0201   ADMIN_PASS[2] = '1';
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0202   ADMIN_PASS[3] = '1';
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0203   GUEST_ID[0] = '0';
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 0204   GUEST_ID[1] = '0';
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0000 0205   GUEST_ID[2] = '0';
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 0206   GUEST_ID[3] = '0';
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 0207   GUEST_PASS[0] = '0';
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0000 0208   GUEST_PASS[1] = '0';
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 0209   GUEST_PASS[2] = '0';
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 020A   GUEST_PASS[3] = '0';
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 020B   while (1) {
;PCODE: $0000041D VOL: 0
; 0000 020C     switch (state) {
;PCODE: $0000041E VOL: 0
; 0000 020D       case IDLE:
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 020E       break;
;PCODE: $00000421 VOL: 0
; 0000 020F 
; 0000 0210       case INIT:
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 0211       PORTC.7 = 0;
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 0212       lcd_clear();
;PCODE: $00000427 VOL: 0
; 0000 0213       lcd_puts("loading data...");
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 0214       loadData();
;PCODE: $0000042B VOL: 0
; 0000 0215       lcd_clear();
;PCODE: $0000042C VOL: 0
; 0000 0216       lcd_puts("loaded");
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 0217       lcd_clear();
;PCODE: $00000430 VOL: 0
; 0000 0218       lcd_puts("user id:");
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 0219       lcd_gotoxy(0, 1);
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 021A       cursor = 0;
;PCODE: $00000438 VOL: 0
; 0000 021B       state = LOGIN_USER;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 021C       break;
;PCODE: $0000043B VOL: 0
; 0000 021D 
; 0000 021E       case LOGIN_PASS_INIT:
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 021F       lcd_clear();
;PCODE: $0000043F VOL: 0
; 0000 0220       lcd_puts("password:");
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0221       lcd_gotoxy(0, 1);
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 0222       cursor = 0;
;PCODE: $00000447 VOL: 0
; 0000 0223       state = LOGIN_PASS;
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 0224       break;
;PCODE: $0000044A VOL: 0
; 0000 0225       case ADMIN_ADD_PASS_INIT:
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 0226       lcd_clear();
;PCODE: $0000044E VOL: 0
; 0000 0227       lcd_puts("password:");
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 0228       lcd_gotoxy(0, 1);
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
; 0000 0229       cursor = 0;
;PCODE: $00000456 VOL: 0
; 0000 022A       state = ADMIN_ADD_PASS;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 022B       break;
;PCODE: $00000459 VOL: 0
; 0000 022C 
; 0000 022D       case LOGIN_CHECK:
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 022E       lcd_clear();
;PCODE: $0000045D VOL: 0
; 0000 022F       lcd_puts("checking...");
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 0230 
; 0000 0231       switch (authenticate()) {
;PCODE: $00000461 VOL: 0
; 0000 0232         case 0:
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 0233         state = LOGIN_ERROR;
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 0234         break;
;PCODE: $00000466 VOL: 0
; 0000 0235         case 1:
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 0236         state = USER_LOGGED;
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 0237         break;
;PCODE: $0000046C VOL: 0
; 0000 0238         case 2:
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 0239         state = ADMIN_MENU;
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 023A         break;
;PCODE: $00000472 VOL: 0
; 0000 023B       }
;PCODE: $00000473 VOL: 0
; 0000 023C       break;
;PCODE: $00000474 VOL: 0
; 0000 023D 
; 0000 023E       case LOGIN_ERROR:
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 023F       lcd_clear();
;PCODE: $00000478 VOL: 0
; 0000 0240       lcd_puts("wrong id or password");
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0241       lcd_gotoxy(0, 1);
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 0242       delay_ms(1500);
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
; 0000 0243       state = INIT;
;PCODE: $00000482 VOL: 0
; 0000 0244       break;
;PCODE: $00000483 VOL: 0
; 0000 0245 
; 0000 0246       case USER_LOGGED:
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 0247       lcd_clear();
;PCODE: $00000487 VOL: 0
; 0000 0248       lcd_puts("checking access");
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 0249       delay_ms(1500);
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 024A       lcd_clear();
;PCODE: $0000048D VOL: 0
; 0000 024B 
; 0000 024C       if (access < 2) {
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
; 0000 024D         lcd_puts("access granted");
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 024E         state = DOOR_OPEN;
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 024F       }else {
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 0250         lcd_puts("no access");
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 0251       }
;PCODE: $0000049B VOL: 0
; 0000 0252       break;
;PCODE: $0000049C VOL: 0
; 0000 0253       case GUEST_LOGGED:
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 0254       lcd_clear();
;PCODE: $000004A0 VOL: 0
; 0000 0255       lcd_puts("checking access");
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0256       delay_ms(1500);
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
; 0000 0257       lcd_clear();
;PCODE: $000004A6 VOL: 0
; 0000 0258 
; 0000 0259       if (access < 2) {
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 025A         lcd_puts("access granted");
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 025B         state = DOOR_OPEN;
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 025C       }else {
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 025D         lcd_puts("no access");
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
; 0000 025E       }
;PCODE: $000004B4 VOL: 0
; 0000 025F 
; 0000 0260       delay_ms(2000);
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 0261       state = INIT;
;PCODE: $000004B7 VOL: 0
; 0000 0262       break;
;PCODE: $000004B8 VOL: 0
; 0000 0263 
; 0000 0264       case ADMIN_MENU:
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0265       lcd_clear();
;PCODE: $000004BC VOL: 0
; 0000 0266       lcd_puts("1.open 2.add    3.del 4.ac *.exc");
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0267       state = ADMIN_CHECK;
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0268       break;
;PCODE: $000004C2 VOL: 0
; 0000 0269 
; 0000 026A       case ADMIN_ADD:
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0000 026B       lcd_clear();
;PCODE: $000004C6 VOL: 0
; 0000 026C       lcd_gotoxy(0,0);
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 026D       lcd_puts("enter user id:");
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 026E       state = ADMIN_ADD_ID;
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 026F       break;
;PCODE: $000004D0 VOL: 0
; 0000 0270 
; 0000 0271       case ADMIN_DEL:
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 0272       lcd_clear();
;PCODE: $000004D4 VOL: 0
; 0000 0273       lcd_gotoxy(0,0);
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 0274       lcd_puts("enter user id:");
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 0275       state = ADMIN_DEL_CHECK;
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 0276       break;
;PCODE: $000004DE VOL: 0
; 0000 0277 
; 0000 0278       case ADMIN_CNT:
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 0279       lcd_clear();
;PCODE: $000004E2 VOL: 0
; 0000 027A       lcd_puts("1 public");
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
; 0000 027B       lcd_gotoxy(8,0);
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 027C       lcd_puts("2 users only");
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 027D       lcd_gotoxy(0,1);
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 027E       lcd_puts("3 none");
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 027F       lcd_gotoxy(8,1);
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0280       lcd_puts("* back");
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 0281       state = ADMIN_CNT_CHECK;
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 0282       break;
;PCODE: $000004FD VOL: 0
; 0000 0283 
; 0000 0284       case DOOR_OPEN:
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0285       PORTC.7 = 1;
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 0286       delay_ms(3000);
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0000 0287       state = INIT;
;PCODE: $00000505 VOL: 0
; 0000 0288       break;
;PCODE: $00000506 VOL: 0
; 0000 0289     }
;PCODE: $00000507 VOL: 0
; 0000 028A   }
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
; 0000 028B }
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0

	.DSEG
_0xA1:
	.BYTE 0x10A
