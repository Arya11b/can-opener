
AVRASM ver. 2.1.30  F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm Sun May 27 16:02:57 2018

F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1091): warning: Register r7 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1093): warning: Register r9 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1095): warning: Register r11 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1096): warning: Register r13 already defined by the .DEF directive
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 2.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _state=R4
                 	.DEF _state_msb=R5
                 	.DEF _cursor=R6
                 	.DEF _cursor_msb=R7
                 	.DEF _user=R8
                 	.DEF _user_msb=R9
                 	.DEF _password=R10
                 	.DEF _password_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 008d 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
00002c 7375
00002d 7265
00002e 6920
00002f 3a64      	.DB  0x75,0x73,0x65,0x72,0x20,0x69,0x64,0x3A
000030 0020
000031 6170
000032 7373
000033 6f77      	.DB  0x20,0x0,0x70,0x61,0x73,0x73,0x77,0x6F
000034 6472
000035 203a
F:\Uni\CEIT_COURSES\6\Microprocessor Lab\Project\Code\Debug\List\main.asm(1135): warning: .cseg .db misalignment - padding zero byte
000036 0000      	.DB  0x72,0x64,0x3A,0x20,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000038 0004      	.DW  0x04
000039 0004      	.DW  0x04
00003a 0054      	.DW  __REG_VARS*2
                 
00003b 000a      	.DW  0x0A
00003c 0160      	.DW  _0x4B
00003d 0058      	.DW  _0x0*2
                 
00003e 000b      	.DW  0x0B
00003f 016a      	.DW  _0x4B+10
000040 0062      	.DW  _0x0*2+10
                 
000041 0002      	.DW  0x02
000042 0175      	.DW  __base_y_G100
000043 006e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 011a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// types
                 ;typedef char* User;
                 ;typedef char* Password;
                 ;
                 ;// Declare your global variables here
                 ;int state = 0;
                 ;int cursor = 0;
                 ;
                 ;User user;
                 ;Password password;
                 ;
                 ;// states
                 ;#define IDLE -1
                 ;#define INIT 0
                 ;#define LOGIN_USER 1
                 ;#define LOGIN_PASS_INIT 2
                 ;#define LOGIN_PASS 3
                 ;#define LOGIN_CHECK 4
                 ;
                 ;// functions
                 ;char getKey();
                 ;
                 ;void print(char c) {
                 ; 0000 001C void print(char c) {
                 
                 	.CSEG
                 _print:
                 ; .FSTART _print
                 ; 0000 001D     lcd_gotoxy(cursor, 1);
000072 93aa      	ST   -Y,R26
                 ;	c -> Y+0
000073 926a      	ST   -Y,R6
000074 e0a1      	LDI  R26,LOW(1)
000075 d115      	RCALL _lcd_gotoxy
                 ; 0000 001E     lcd_putchar(c);
000076 81a8      	LD   R26,Y
000077 d12a      	RCALL _lcd_putchar
                 ; 0000 001F     cursor++;
000078 01f3      	MOVW R30,R6
000079 9631      	ADIW R30,1
00007a 013f      	MOVW R6,R30
                 ; 0000 0020 }
00007b 940c 01f3 	JMP  _0x2020001
                 ; .FEND
                 ;
                 ;void prints(char* s) {
                 ; 0000 0022 void prints(char* s) {
                 ; 0000 0023     lcd_puts(s);
                 ;	*s -> Y+0
                 ; 0000 0024 }
                 ;
                 ;void clear() {
                 ; 0000 0026 void clear() {
                 _clear:
                 ; .FSTART _clear
                 ; 0000 0027     cursor = cursor > 0 ? cursor-1 : 0;
00007d 2400      	CLR  R0
00007e 1406      	CP   R0,R6
00007f 0407      	CPC  R0,R7
000080 f41c      	BRGE _0x3
000081 01f3      	MOVW R30,R6
000082 9731      	SBIW R30,1
000083 c002      	RJMP _0x4
                 _0x3:
000084 e0e0      	LDI  R30,LOW(0)
000085 e0f0      	LDI  R31,HIGH(0)
                 _0x4:
000086 013f      	MOVW R6,R30
                 ; 0000 0028     lcd_gotoxy(cursor, 1);
000087 926a      	ST   -Y,R6
000088 e0a1      	LDI  R26,LOW(1)
000089 d101      	RCALL _lcd_gotoxy
                 ; 0000 0029     lcd_putchar('');
00008a e0a0      	LDI  R26,LOW(0)
00008b d116      	RCALL _lcd_putchar
                 ; 0000 002A }
00008c 9508      	RET
                 ; .FEND
                 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 002D interrupt [2] void ext_int0_isr(void) {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00008d 920a      	ST   -Y,R0
00008e 921a      	ST   -Y,R1
00008f 92fa      	ST   -Y,R15
000090 936a      	ST   -Y,R22
000091 937a      	ST   -Y,R23
000092 938a      	ST   -Y,R24
000093 939a      	ST   -Y,R25
000094 93aa      	ST   -Y,R26
000095 93ba      	ST   -Y,R27
000096 93ea      	ST   -Y,R30
000097 93fa      	ST   -Y,R31
000098 b7ef      	IN   R30,SREG
000099 93ea      	ST   -Y,R30
                 ; 0000 002E     char pressedKey = '';
                 ; 0000 002F     switch (state) {
00009a 931a      	ST   -Y,R17
                 ;	pressedKey -> R17
00009b e010      	LDI  R17,0
00009c 01f2      	MOVW R30,R4
                 ; 0000 0030         case LOGIN_USER:
00009d 30e1      	CPI  R30,LOW(0x1)
00009e e0a0      	LDI  R26,HIGH(0x1)
00009f 07fa      	CPC  R31,R26
0000a0 f499      	BRNE _0x9
                 ; 0000 0031             pressedKey = getKey();
0000a1 d037      	RCALL _getKey
0000a2 2f1e      	MOV  R17,R30
                 ; 0000 0032 
                 ; 0000 0033             if (pressedKey == '#') {
0000a3 3213      	CPI  R17,35
0000a4 f421      	BRNE _0xA
                 ; 0000 0034                 state = LOGIN_PASS_INIT;
0000a5 e0e2      	LDI  R30,LOW(2)
0000a6 e0f0      	LDI  R31,HIGH(2)
0000a7 012f      	MOVW R4,R30
                 ; 0000 0035             }else if (pressedKey == '*') {
0000a8 c00a      	RJMP _0xB
                 _0xA:
0000a9 321a      	CPI  R17,42
0000aa f411      	BRNE _0xC
                 ; 0000 0036                 clear();
0000ab dfd1      	RCALL _clear
                 ; 0000 0037             }else{
0000ac c006      	RJMP _0xD
                 _0xC:
                 ; 0000 0038                 user[cursor] = pressedKey;
0000ad 01f3      	MOVW R30,R6
0000ae 0de8      	ADD  R30,R8
0000af 1df9      	ADC  R31,R9
0000b0 8310      	ST   Z,R17
                 ; 0000 0039                 print(pressedKey);
0000b1 2fa1      	MOV  R26,R17
0000b2 dfbf      	RCALL _print
                 ; 0000 003A             }
                 _0xD:
                 _0xB:
                 ; 0000 003B             break;
0000b3 c016      	RJMP _0x8
                 ; 0000 003C 
                 ; 0000 003D         case LOGIN_PASS:
                 _0x9:
0000b4 30e3      	CPI  R30,LOW(0x3)
0000b5 e0a0      	LDI  R26,HIGH(0x3)
0000b6 07fa      	CPC  R31,R26
0000b7 f491      	BRNE _0x8
                 ; 0000 003E             pressedKey = getKey();
0000b8 d020      	RCALL _getKey
0000b9 2f1e      	MOV  R17,R30
                 ; 0000 003F 
                 ; 0000 0040             if (pressedKey == '#') {
0000ba 3213      	CPI  R17,35
0000bb f421      	BRNE _0xF
                 ; 0000 0041                 state = LOGIN_CHECK;
0000bc e0e4      	LDI  R30,LOW(4)
0000bd e0f0      	LDI  R31,HIGH(4)
0000be 012f      	MOVW R4,R30
                 ; 0000 0042             }else if (pressedKey == '*') {
0000bf c00a      	RJMP _0x10
                 _0xF:
0000c0 321a      	CPI  R17,42
0000c1 f411      	BRNE _0x11
                 ; 0000 0043                 clear();
0000c2 dfba      	RCALL _clear
                 ; 0000 0044             }else{
0000c3 c006      	RJMP _0x12
                 _0x11:
                 ; 0000 0045                 password[cursor] = pressedKey;
0000c4 01f3      	MOVW R30,R6
0000c5 0dea      	ADD  R30,R10
0000c6 1dfb      	ADC  R31,R11
0000c7 8310      	ST   Z,R17
                 ; 0000 0046                 print('*');
0000c8 e2aa      	LDI  R26,LOW(42)
0000c9 dfa8      	RCALL _print
                 ; 0000 0047             }
                 _0x12:
                 _0x10:
                 ; 0000 0048 
                 ; 0000 0049             break;
                 ; 0000 004A     }
                 _0x8:
                 ; 0000 004B 
                 ; 0000 004C }
0000ca 9119      	LD   R17,Y+
0000cb 91e9      	LD   R30,Y+
0000cc bfef      	OUT  SREG,R30
0000cd 91f9      	LD   R31,Y+
0000ce 91e9      	LD   R30,Y+
0000cf 91b9      	LD   R27,Y+
0000d0 91a9      	LD   R26,Y+
0000d1 9199      	LD   R25,Y+
0000d2 9189      	LD   R24,Y+
0000d3 9179      	LD   R23,Y+
0000d4 9169      	LD   R22,Y+
0000d5 90f9      	LD   R15,Y+
0000d6 9019      	LD   R1,Y+
0000d7 9009      	LD   R0,Y+
0000d8 9518      	RETI
                 ; .FEND
                 ;
                 ;char getKey() {
                 ; 0000 004E char getKey() {
                 _getKey:
                 ; .FSTART _getKey
                 ; 0000 004F     char pressedKey = '';
                 ; 0000 0050 
                 ; 0000 0051     PORTC.0 = 0;
0000d9 931a      	ST   -Y,R17
                 ;	pressedKey -> R17
0000da e010      	LDI  R17,0
0000db 98a8      	CBI  0x15,0
                 ; 0000 0052     PORTC.1 = 1;
0000dc 9aa9      	SBI  0x15,1
                 ; 0000 0053     PORTC.2 = 1;
0000dd 9aaa      	SBI  0x15,2
                 ; 0000 0054 
                 ; 0000 0055     if (PINC.0 == 0) {
0000de 9998      	SBIC 0x13,0
0000df c00e      	RJMP _0x19
                 ; 0000 0056         if (PINC.3 == 0) {
0000e0 999b      	SBIC 0x13,3
0000e1 c002      	RJMP _0x1A
                 ; 0000 0057             pressedKey = '1';
0000e2 e311      	LDI  R17,LOW(49)
                 ; 0000 0058         }else if (PINC.4 == 0) {
0000e3 c00a      	RJMP _0x1B
                 _0x1A:
0000e4 999c      	SBIC 0x13,4
0000e5 c002      	RJMP _0x1C
                 ; 0000 0059             pressedKey = '4';
0000e6 e314      	LDI  R17,LOW(52)
                 ; 0000 005A         }else if (PINC.5 == 0) {
0000e7 c006      	RJMP _0x1D
                 _0x1C:
0000e8 999d      	SBIC 0x13,5
0000e9 c002      	RJMP _0x1E
                 ; 0000 005B             pressedKey = '7';
0000ea e317      	LDI  R17,LOW(55)
                 ; 0000 005C         }else if (PINC.6 == 0) {
0000eb c002      	RJMP _0x1F
                 _0x1E:
0000ec 9b9e      	SBIS 0x13,6
                 ; 0000 005D             pressedKey = '*';
0000ed e21a      	LDI  R17,LOW(42)
                 ; 0000 005E         }
                 ; 0000 005F     }
                 _0x1F:
                 _0x1D:
                 _0x1B:
                 ; 0000 0060 
                 ; 0000 0061     PORTC.0 = 1;
                 _0x19:
0000ee 9aa8      	SBI  0x15,0
                 ; 0000 0062     PORTC.1 = 0;
0000ef 98a9      	CBI  0x15,1
                 ; 0000 0063     PORTC.2 = 1;
0000f0 9aaa      	SBI  0x15,2
                 ; 0000 0064 
                 ; 0000 0065     if (PINC.1 == 0) {
0000f1 9999      	SBIC 0x13,1
0000f2 c00e      	RJMP _0x27
                 ; 0000 0066         if (PINC.3 == 0) {
0000f3 999b      	SBIC 0x13,3
0000f4 c002      	RJMP _0x28
                 ; 0000 0067             pressedKey = '2';
0000f5 e312      	LDI  R17,LOW(50)
                 ; 0000 0068         }else if (PINC.4 == 0) {
0000f6 c00a      	RJMP _0x29
                 _0x28:
0000f7 999c      	SBIC 0x13,4
0000f8 c002      	RJMP _0x2A
                 ; 0000 0069             pressedKey = '5';
0000f9 e315      	LDI  R17,LOW(53)
                 ; 0000 006A         }else if (PINC.5 == 0) {
0000fa c006      	RJMP _0x2B
                 _0x2A:
0000fb 999d      	SBIC 0x13,5
0000fc c002      	RJMP _0x2C
                 ; 0000 006B             pressedKey = '8';
0000fd e318      	LDI  R17,LOW(56)
                 ; 0000 006C         }else if (PINC.6 == 0) {
0000fe c002      	RJMP _0x2D
                 _0x2C:
0000ff 9b9e      	SBIS 0x13,6
                 ; 0000 006D             pressedKey = '0';
000100 e310      	LDI  R17,LOW(48)
                 ; 0000 006E         }
                 ; 0000 006F     }
                 _0x2D:
                 _0x2B:
                 _0x29:
                 ; 0000 0070 
                 ; 0000 0071     PORTC.0 = 1;
                 _0x27:
000101 9aa8      	SBI  0x15,0
                 ; 0000 0072     PORTC.1 = 1;
000102 9aa9      	SBI  0x15,1
                 ; 0000 0073     PORTC.2 = 0;
000103 98aa      	CBI  0x15,2
                 ; 0000 0074 
                 ; 0000 0075     if (PINC.2 == 0) {
000104 999a      	SBIC 0x13,2
000105 c00e      	RJMP _0x35
                 ; 0000 0076         if (PINC.3 == 0) {
000106 999b      	SBIC 0x13,3
000107 c002      	RJMP _0x36
                 ; 0000 0077             pressedKey = '3';
000108 e313      	LDI  R17,LOW(51)
                 ; 0000 0078         }else if (PINC.4 == 0) {
000109 c00a      	RJMP _0x37
                 _0x36:
00010a 999c      	SBIC 0x13,4
00010b c002      	RJMP _0x38
                 ; 0000 0079             pressedKey = '6';
00010c e316      	LDI  R17,LOW(54)
                 ; 0000 007A         }else if (PINC.5 == 0) {
00010d c006      	RJMP _0x39
                 _0x38:
00010e 999d      	SBIC 0x13,5
00010f c002      	RJMP _0x3A
                 ; 0000 007B             pressedKey = '9';
000110 e319      	LDI  R17,LOW(57)
                 ; 0000 007C         }else if (PINC.6 == 0) {
000111 c002      	RJMP _0x3B
                 _0x3A:
000112 9b9e      	SBIS 0x13,6
                 ; 0000 007D             pressedKey = '#';
000113 e213      	LDI  R17,LOW(35)
                 ; 0000 007E         }
                 ; 0000 007F     }
                 _0x3B:
                 _0x39:
                 _0x37:
                 ; 0000 0080 
                 ; 0000 0081     PORTC.0 = 0;
                 _0x35:
000114 98a8      	CBI  0x15,0
                 ; 0000 0082     PORTC.1 = 0;
000115 98a9      	CBI  0x15,1
                 ; 0000 0083     PORTC.2 = 0;
000116 98aa      	CBI  0x15,2
                 ; 0000 0084 
                 ; 0000 0085     return pressedKey;
000117 2fe1      	MOV  R30,R17
000118 9119      	LD   R17,Y+
000119 9508      	RET
                 ; 0000 0086 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0089 {
                 _main:
                 ; .FSTART _main
                 ; 0000 008A     // Declare your local variables here
                 ; 0000 008B 
                 ; 0000 008C     // Input/Output Ports initialization
                 ; 0000 008D     // Port A initialization
                 ; 0000 008E     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008F     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00011a e0e0      	LDI  R30,LOW(0)
00011b bbea      	OUT  0x1A,R30
                 ; 0000 0090     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0091     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00011c bbeb      	OUT  0x1B,R30
                 ; 0000 0092 
                 ; 0000 0093     // Port B initialization
                 ; 0000 0094     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0095     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00011d bbe7      	OUT  0x17,R30
                 ; 0000 0096     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0097     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00011e bbe8      	OUT  0x18,R30
                 ; 0000 0098 
                 ; 0000 0099     // Port C initialization
                 ; 0000 009A     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009B     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00011f e0e7      	LDI  R30,LOW(7)
000120 bbe4      	OUT  0x14,R30
                 ; 0000 009C     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 009D     PORTC=(0<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000121 e7e8      	LDI  R30,LOW(120)
000122 bbe5      	OUT  0x15,R30
                 ; 0000 009E 
                 ; 0000 009F     // Port D initialization
                 ; 0000 00A0     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00A1     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000123 e0e0      	LDI  R30,LOW(0)
000124 bbe1      	OUT  0x11,R30
                 ; 0000 00A2     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A3     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000125 bbe2      	OUT  0x12,R30
                 ; 0000 00A4 
                 ; 0000 00A5     // Timer/Counter 0 initialization
                 ; 0000 00A6     // Clock source: System Clock
                 ; 0000 00A7     // Clock value: Timer 0 Stopped
                 ; 0000 00A8     // Mode: Normal top=0xFF
                 ; 0000 00A9     // OC0 output: Disconnected
                 ; 0000 00AA     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000126 bfe3      	OUT  0x33,R30
                 ; 0000 00AB     TCNT0=0x00;
000127 bfe2      	OUT  0x32,R30
                 ; 0000 00AC     OCR0=0x00;
000128 bfec      	OUT  0x3C,R30
                 ; 0000 00AD 
                 ; 0000 00AE     // Timer/Counter 1 initialization
                 ; 0000 00AF     // Clock source: System Clock
                 ; 0000 00B0     // Clock value: Timer1 Stopped
                 ; 0000 00B1     // Mode: Normal top=0xFFFF
                 ; 0000 00B2     // OC1A output: Disconnected
                 ; 0000 00B3     // OC1B output: Disconnected
                 ; 0000 00B4     // Noise Canceler: Off
                 ; 0000 00B5     // Input Capture on Falling Edge
                 ; 0000 00B6     // Timer1 Overflow Interrupt: Off
                 ; 0000 00B7     // Input Capture Interrupt: Off
                 ; 0000 00B8     // Compare A Match Interrupt: Off
                 ; 0000 00B9     // Compare B Match Interrupt: Off
                 ; 0000 00BA     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000129 bdef      	OUT  0x2F,R30
                 ; 0000 00BB     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00012a bdee      	OUT  0x2E,R30
                 ; 0000 00BC     TCNT1H=0x00;
00012b bded      	OUT  0x2D,R30
                 ; 0000 00BD     TCNT1L=0x00;
00012c bdec      	OUT  0x2C,R30
                 ; 0000 00BE     ICR1H=0x00;
00012d bde7      	OUT  0x27,R30
                 ; 0000 00BF     ICR1L=0x00;
00012e bde6      	OUT  0x26,R30
                 ; 0000 00C0     OCR1AH=0x00;
00012f bdeb      	OUT  0x2B,R30
                 ; 0000 00C1     OCR1AL=0x00;
000130 bdea      	OUT  0x2A,R30
                 ; 0000 00C2     OCR1BH=0x00;
000131 bde9      	OUT  0x29,R30
                 ; 0000 00C3     OCR1BL=0x00;
000132 bde8      	OUT  0x28,R30
                 ; 0000 00C4 
                 ; 0000 00C5     // Timer/Counter 2 initialization
                 ; 0000 00C6     // Clock source: System Clock
                 ; 0000 00C7     // Clock value: Timer2 Stopped
                 ; 0000 00C8     // Mode: Normal top=0xFF
                 ; 0000 00C9     // OC2 output: Disconnected
                 ; 0000 00CA     ASSR=0<<AS2;
000133 bde2      	OUT  0x22,R30
                 ; 0000 00CB     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000134 bde5      	OUT  0x25,R30
                 ; 0000 00CC     TCNT2=0x00;
000135 bde4      	OUT  0x24,R30
                 ; 0000 00CD     OCR2=0x00;
000136 bde3      	OUT  0x23,R30
                 ; 0000 00CE 
                 ; 0000 00CF     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D0     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000137 bfe9      	OUT  0x39,R30
                 ; 0000 00D1 
                 ; 0000 00D2     // External Interrupt(s) initialization
                 ; 0000 00D3     // INT0: On
                 ; 0000 00D4     // INT0 Mode: Rising Edge
                 ; 0000 00D5     // INT1: Off
                 ; 0000 00D6     // INT2: Off
                 ; 0000 00D7     GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
000138 b7eb      	IN   R30,0x3B
000139 64e0      	ORI  R30,0x40
00013a bfeb      	OUT  0x3B,R30
                 ; 0000 00D8     MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
00013b e0e3      	LDI  R30,LOW(3)
00013c bfe5      	OUT  0x35,R30
                 ; 0000 00D9     MCUCSR=(0<<ISC2);
00013d e0e0      	LDI  R30,LOW(0)
00013e bfe4      	OUT  0x34,R30
                 ; 0000 00DA     GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
00013f e4e0      	LDI  R30,LOW(64)
000140 bfea      	OUT  0x3A,R30
                 ; 0000 00DB 
                 ; 0000 00DC     // USART initialization
                 ; 0000 00DD     // USART disabled
                 ; 0000 00DE     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000141 e0e0      	LDI  R30,LOW(0)
000142 b9ea      	OUT  0xA,R30
                 ; 0000 00DF 
                 ; 0000 00E0     // Analog Comparator initialization
                 ; 0000 00E1     // Analog Comparator: Off
                 ; 0000 00E2     // The Analog Comparator's positive input is
                 ; 0000 00E3     // connected to the AIN0 pin
                 ; 0000 00E4     // The Analog Comparator's negative input is
                 ; 0000 00E5     // connected to the AIN1 pin
                 ; 0000 00E6     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000143 e8e0      	LDI  R30,LOW(128)
000144 b9e8      	OUT  0x8,R30
                 ; 0000 00E7     SFIOR=(0<<ACME);
000145 e0e0      	LDI  R30,LOW(0)
000146 bfe0      	OUT  0x30,R30
                 ; 0000 00E8 
                 ; 0000 00E9     // ADC initialization
                 ; 0000 00EA     // ADC disabled
                 ; 0000 00EB     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000147 b9e6      	OUT  0x6,R30
                 ; 0000 00EC 
                 ; 0000 00ED     // SPI initialization
                 ; 0000 00EE     // SPI disabled
                 ; 0000 00EF     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000148 b9ed      	OUT  0xD,R30
                 ; 0000 00F0 
                 ; 0000 00F1     // TWI initialization
                 ; 0000 00F2     // TWI disabled
                 ; 0000 00F3     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000149 bfe6      	OUT  0x36,R30
                 ; 0000 00F4 
                 ; 0000 00F5     // Alphanumeric LCD initialization
                 ; 0000 00F6     // Connections are specified in the
                 ; 0000 00F7     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F8     // RS - PORTA Bit 1
                 ; 0000 00F9     // RD - PORTA Bit 2
                 ; 0000 00FA     // EN - PORTA Bit 3
                 ; 0000 00FB     // D4 - PORTA Bit 4
                 ; 0000 00FC     // D5 - PORTA Bit 5
                 ; 0000 00FD     // D6 - PORTA Bit 6
                 ; 0000 00FE     // D7 - PORTA Bit 7
                 ; 0000 00FF     // Characters/line: 16
                 ; 0000 0100     lcd_init(16);
00014a e1a0      	LDI  R26,LOW(16)
00014b d07e      	RCALL _lcd_init
                 ; 0000 0101 
                 ; 0000 0102     // Global enable interrupts
                 ; 0000 0103     #asm("sei")
00014c 9478      	sei
                 ; 0000 0104 
                 ; 0000 0105     while (1) {
                 _0x43:
                 ; 0000 0106 
                 ; 0000 0107         switch (state) {
00014d 01f2      	MOVW R30,R4
                 ; 0000 0108             case IDLE:
00014e 3fef      	CPI  R30,LOW(0xFFFFFFFF)
00014f efaf      	LDI  R26,HIGH(0xFFFFFFFF)
000150 07fa      	CPC  R31,R26
000151 f0b9      	BREQ _0x48
                 ; 0000 0109                 break;
                 ; 0000 010A             case INIT:
000152 9730      	SBIW R30,0
000153 f441      	BRNE _0x4A
                 ; 0000 010B                 lcd_clear();
000154 d043      	RCALL _lcd_clear
                 ; 0000 010C                 lcd_puts("user id: ");
                +
000155 e6a0     +LDI R26 , LOW ( _0x4B + ( 0 ) )
000156 e0b1     +LDI R27 , HIGH ( _0x4B + ( 0 ) )
                 	__POINTW2MN _0x4B,0
000157 d09d      	RCALL SUBOPT_0x0
                 ; 0000 010D                 lcd_gotoxy(0, 1);
                 ; 0000 010E                 state = LOGIN_USER;
000158 e0e1      	LDI  R30,LOW(1)
000159 e0f0      	LDI  R31,HIGH(1)
00015a 012f      	MOVW R4,R30
                 ; 0000 010F                 break;
00015b c00d      	RJMP _0x48
                 ; 0000 0110 
                 ; 0000 0111             case LOGIN_PASS_INIT:
                 _0x4A:
00015c 30e2      	CPI  R30,LOW(0x2)
00015d e0a0      	LDI  R26,HIGH(0x2)
00015e 07fa      	CPC  R31,R26
00015f f449      	BRNE _0x48
                 ; 0000 0112                 lcd_clear();
000160 d037      	RCALL _lcd_clear
                 ; 0000 0113                 lcd_puts("password: ");
                +
000161 e6aa     +LDI R26 , LOW ( _0x4B + ( 10 ) )
000162 e0b1     +LDI R27 , HIGH ( _0x4B + ( 10 ) )
                 	__POINTW2MN _0x4B,10
000163 d091      	RCALL SUBOPT_0x0
                 ; 0000 0114                 lcd_gotoxy(0, 1);
                 ; 0000 0115                 state = LOGIN_PASS;
000164 e0e3      	LDI  R30,LOW(3)
000165 e0f0      	LDI  R31,HIGH(3)
000166 012f      	MOVW R4,R30
                 ; 0000 0116                 cursor = 0;
000167 2466      	CLR  R6
000168 2477      	CLR  R7
                 ; 0000 0117                 break;
                 ; 0000 0118         }
                 _0x48:
                 ; 0000 0119     }
000169 cfe3      	RJMP _0x43
                 ; 0000 011A }
                 _0x4D:
00016a cfff      	RJMP _0x4D
                 ; .FEND
                 
                 	.DSEG
                 _0x4B:
000160           	.BYTE 0x15
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00016b 93aa      	ST   -Y,R26
00016c b3eb      	IN   R30,0x1B
00016d 70ef      	ANDI R30,LOW(0xF)
00016e 2fae      	MOV  R26,R30
00016f 81e8      	LD   R30,Y
000170 7fe0      	ANDI R30,LOW(0xF0)
000171 2bea      	OR   R30,R26
000172 bbeb      	OUT  0x1B,R30
                +
000173 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000174 958a     +DEC R24
000175 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
000176 9adb      	SBI  0x1B,3
                +
000177 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000178 958a     +DEC R24
000179 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
00017a 98db      	CBI  0x1B,3
                +
00017b e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00017c 958a     +DEC R24
00017d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
00017e c074      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00017f 93aa      	ST   -Y,R26
000180 81a8      	LD   R26,Y
000181 dfe9      	RCALL __lcd_write_nibble_G100
000182 81e8          ld    r30,y
000183 95e2          swap  r30
000184 83e8          st    y,r30
000185 81a8      	LD   R26,Y
000186 dfe4      	RCALL __lcd_write_nibble_G100
                +
000187 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000188 958a     +DEC R24
000189 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00018a c068      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00018b 93aa      	ST   -Y,R26
00018c 81e8      	LD   R30,Y
00018d e0f0      	LDI  R31,0
00018e 58eb      	SUBI R30,LOW(-__base_y_G100)
00018f 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000190 81e0      	LD   R30,Z
000191 81a9      	LDD  R26,Y+1
000192 0fae      	ADD  R26,R30
000193 dfeb      	RCALL __lcd_write_data
000194 80d9      	LDD  R13,Y+1
000195 80c8      	LDD  R12,Y+0
000196 9622      	ADIW R28,2
000197 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000198 e0a2      	LDI  R26,LOW(2)
000199 d060      	RCALL SUBOPT_0x1
00019a e0ac      	LDI  R26,LOW(12)
00019b dfe3      	RCALL __lcd_write_data
00019c e0a1      	LDI  R26,LOW(1)
00019d d05c      	RCALL SUBOPT_0x1
00019e e0e0      	LDI  R30,LOW(0)
00019f 2ece      	MOV  R12,R30
0001a0 2ede      	MOV  R13,R30
0001a1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001a2 93aa      	ST   -Y,R26
0001a3 81a8      	LD   R26,Y
0001a4 30aa      	CPI  R26,LOW(0xA)
0001a5 f021      	BREQ _0x2000005
0001a6 91e0 0179 	LDS  R30,__lcd_maxx
0001a8 16de      	CP   R13,R30
0001a9 f048      	BRLO _0x2000004
                 _0x2000005:
0001aa e0e0      	LDI  R30,LOW(0)
0001ab 93ea      	ST   -Y,R30
0001ac 94c3      	INC  R12
0001ad 2dac      	MOV  R26,R12
0001ae dfdc      	RCALL _lcd_gotoxy
0001af 81a8      	LD   R26,Y
0001b0 30aa      	CPI  R26,LOW(0xA)
0001b1 f409      	BRNE _0x2000007
0001b2 c040      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001b3 94d3      	INC  R13
0001b4 9ad9      	SBI  0x1B,1
0001b5 81a8      	LD   R26,Y
0001b6 dfc8      	RCALL __lcd_write_data
0001b7 98d9      	CBI  0x1B,1
0001b8 c03a      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001b9 93ba      	ST   -Y,R27
0001ba 93aa      	ST   -Y,R26
0001bb 931a      	ST   -Y,R17
                 _0x2000008:
0001bc 81a9      	LDD  R26,Y+1
0001bd 81ba      	LDD  R27,Y+1+1
0001be 91ed      	LD   R30,X+
0001bf 83a9      	STD  Y+1,R26
0001c0 83ba      	STD  Y+1+1,R27
0001c1 2f1e      	MOV  R17,R30
0001c2 30e0      	CPI  R30,0
0001c3 f019      	BREQ _0x200000A
0001c4 2fa1      	MOV  R26,R17
0001c5 dfdc      	RCALL _lcd_putchar
0001c6 cff5      	RJMP _0x2000008
                 _0x200000A:
0001c7 8118      	LDD  R17,Y+0
0001c8 9623      	ADIW R28,3
0001c9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001ca 93aa      	ST   -Y,R26
0001cb b3ea      	IN   R30,0x1A
0001cc 6fe0      	ORI  R30,LOW(0xF0)
0001cd bbea      	OUT  0x1A,R30
0001ce 9ad3      	SBI  0x1A,3
0001cf 9ad1      	SBI  0x1A,1
0001d0 9ad2      	SBI  0x1A,2
0001d1 98db      	CBI  0x1B,3
0001d2 98d9      	CBI  0x1B,1
0001d3 98da      	CBI  0x1B,2
0001d4 81e8      	LD   R30,Y
0001d5 93e0 0179 	STS  __lcd_maxx,R30
0001d7 58e0      	SUBI R30,-LOW(128)
                +
0001d8 93e0 0177+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001da 81e8      	LD   R30,Y
0001db 54e0      	SUBI R30,-LOW(192)
                +
0001dc 93e0 0178+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001de e1a4      	LDI  R26,LOW(20)
0001df e0b0      	LDI  R27,0
0001e0 940e 0205 	CALL _delay_ms
0001e2 d01c      	RCALL SUBOPT_0x2
0001e3 d01b      	RCALL SUBOPT_0x2
0001e4 d01a      	RCALL SUBOPT_0x2
0001e5 e2a0      	LDI  R26,LOW(32)
0001e6 df84      	RCALL __lcd_write_nibble_G100
                +
0001e7 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0001e8 958a     +DEC R24
0001e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
0001ea e2a8      	LDI  R26,LOW(40)
0001eb df93      	RCALL __lcd_write_data
0001ec e0a4      	LDI  R26,LOW(4)
0001ed df91      	RCALL __lcd_write_data
0001ee e8a5      	LDI  R26,LOW(133)
0001ef df8f      	RCALL __lcd_write_data
0001f0 e0a6      	LDI  R26,LOW(6)
0001f1 df8d      	RCALL __lcd_write_data
0001f2 dfa5      	RCALL _lcd_clear
                 _0x2020001:
0001f3 9621      	ADIW R28,1
0001f4 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000175           	.BYTE 0x4
                 __lcd_maxx:
000179           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001f5 dfc3      	RCALL _lcd_puts
0001f6 e0e0      	LDI  R30,LOW(0)
0001f7 93ea      	ST   -Y,R30
0001f8 e0a1      	LDI  R26,LOW(1)
0001f9 cf91      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001fa df84      	RCALL __lcd_write_data
0001fb e0a3      	LDI  R26,LOW(3)
0001fc e0b0      	LDI  R27,0
0001fd 940c 0205 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0001ff e3a0      	LDI  R26,LOW(48)
000200 df6a      	RCALL __lcd_write_nibble_G100
                +
000201 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
000202 958a     +DEC R24
000203 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
000204 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000205 9610      	adiw r26,0
000206 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000207 ef84     +LDI R24 , LOW ( 0x1F4 )
000208 e091     +LDI R25 , HIGH ( 0x1F4 )
                +__DELAY_USW_LOOP :
000209 9701     +SBIW R24 , 1
00020a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1F4
00020b 95a8      	wdr
00020c 9711      	sbiw r26,1
00020d f7c9      	brne __delay_ms0
                 __delay_ms1:
00020e 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   9 r1 :   3 r2 :   0 r3 :   0 r4 :   6 r5 :   0 r6 :  10 r7 :   2 
r8 :   1 r9 :   1 r10:   1 r11:   1 r12:   4 r13:   4 r14:   0 r15:   2 
r16:   0 r17:  32 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   5 r26:  58 r27:  11 r28:   4 r29:   1 r30: 133 r31:  18 
x  :   4 y  :  61 z  :  10 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :   5 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   5 cpi   :  11 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  24 ld    :  27 ldd   :   6 ldi   :  85 
lds   :   1 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  10 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  45 pop   :   0 push  :   0 rcall :  36 ret   :   8 
reti  :   1 rjmp  :  37 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :  11 sbic  :  12 sbis  :   3 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  33 std   :   2 sts   :   3 sub   :   0 subi  :   3 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00041e   1000     54   1054   16384   6.4%
[.dseg] 0x000060 0x00017a      0     26     26    1024   2.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
